apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-server
    app.kubernetes.io/component: api-server
    app.kubernetes.io/instance: api-server
  name: api-server
  namespace: website
spec:
  ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    deployment: api-server
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: api-server
    app.kubernetes.io/component: api-server
    app.kubernetes.io/instance: api-server
  name: api-server
  namespace: website
spec:
  host: api-server-website.apps.cluster-27b6.27b6.sandbox629.opentlc.com
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: api-server
    weight: 100
  wildcardPolicy: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api-server
    app.kubernetes.io/component: api-server
    app.kubernetes.io/instance: api-server
  name: api-server
  namespace: website
spec:
  progressDeadlineSeconds: 600
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: api-server
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        deployment: api-server
    spec:
      containers:
        - image: docker.io/cmwylie19/api-server
          imagePullPolicy: IfNotPresent
          name: api-server
          ports:
            - containerPort: 8080
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app: api-server-docker
  name: api-server-docker
  namespace: website
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: api-server:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    binary: {}
    type: Binary
  strategy:
    dockerStrategy:
      dockerfilePath: Dockerfile
    type: Docker
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: api-server-pipeline
  namespace: website
spec:
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        node('agent') {
          stage 'build'
          openshiftBuild(buildConfig: 'api-server-docker', showBuildLogs: 'true')
          stage 'deploy'
          openshiftDeploy(deployment: 'api-server')
        }
    type: JenkinsPipeline
  triggers:
    - github:
        secret: QdBuCPedHi-u2kD4WLRR
      type: GitHub
