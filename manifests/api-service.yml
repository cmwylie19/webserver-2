apiVersion: apps.openshift.io/v1
kind: DeploymentConfig
metadata:
  labels:
    app: api-server
    template: jenkins-persistent-template
  name: api-server
  namespace: website
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    name: api-server
  strategy:
    activeDeadlineSeconds: 21600
    recreateParams:
      timeoutSeconds: 600
    resources: {}
    type: Recreate
  template:
    metadata:
      creationTimestamp: null
      labels:
        name: api-server
    spec:
      containers:
      - env:
        - name: OPENSHIFT_ENABLE_OAUTH
          value: "true"
        - name: OPENSHIFT_ENABLE_REDIRECT_PROMPT
          value: "true"
        - name: DISABLE_ADMINISTRATIVE_MONITORS
          value: "false"
        - name: KUBERNETES_MASTER
          value: https://kubernetes.default:443
        - name: KUBERNETES_TRUST_CERTIFICATES
          value: "true"
        - name: JENKINS_SERVICE_NAME
          value: jenkins
        - name: JNLP_SERVICE_NAME
          value: jenkins-jnlp
        - name: ENABLE_FATAL_ERROR_LOG_FILE
          value: "false"
        - name: JENKINS_UC_INSECURE
          value: "false"
        image: docker.io/cmwylie19/api-server
        imagePullPolicy: IfNotPresent
        livenessProbe:
          failureThreshold: 2
          httpGet:
            path: /test
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 420
          periodSeconds: 360
          successThreshold: 1
          timeoutSeconds: 240
        name: api-server
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /test
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 3
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 240
        resources:
          limits:
            memory: 1Gi
        securityContext:
          capabilities: {}
          privileged: false
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        # volumeMounts:
        # - mountPath: /var/lib/jenkins
        #   name: jenkins-data
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      # serviceAccount: jenkins
      # serviceAccountName: jenkins
      terminationGracePeriodSeconds: 30
      # volumes:
      # - name: jenkins-data
      #   persistentVolumeClaim:
      #     claimName: jenkins
  test: false
  triggers: []
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: rust
  name: rust
  namespace: website
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: rust
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
      creationTimestamp: null
      labels:
        deployment: rust
    spec:
      containers:
      - image: docker.io/cmwylie19/jenkins-slave-rust:latest
        imagePullPolicy: IfNotPresent
        name: rust
        ports:
        - containerPort: 8443
          protocol: TCP
        - containerPort: 53
          protocol: TCP
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: ImageStream
metadata:
  labels:
    role: jenkins-slave
  name: rust
spec:
  tags:
  - from:
      kind: DockerImage
      name: docker.io/outtherelabs/jenkins-slave-rust:latest
    name: latest
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: api-server
    app.kubernetes.io/component: api-server
    app.kubernetes.io/instance: api-server
  name: api-server
  namespace: website
spec:
  ports:
    - name: 8080-tcp
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    deployment: api-server
---
apiVersion: route.openshift.io/v1
kind: Route
metadata:
  labels:
    app: api-server
    app.kubernetes.io/component: api-server
    app.kubernetes.io/instance: api-server
  name: api-server
  namespace: website
spec:
  host: api-server-website.apps.cluster-27b6.27b6.sandbox629.opentlc.com
  port:
    targetPort: 8080-tcp
  to:
    kind: Service
    name: api-server
    weight: 100
  wildcardPolicy: None
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: api-server
    app.kubernetes.io/component: api-server
    app.kubernetes.io/instance: api-server
  name: api-server
  namespace: website
spec:
  progressDeadlineSeconds: 600
  replicas: 4
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      deployment: api-server
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        deployment: api-server
    spec:
      containers:
        - image: docker.io/cmwylie19/api-server
          imagePullPolicy: IfNotPresent
          name: api-server
          ports:
            - containerPort: 8080
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    application: origin-jenkins-agent-rust
  name: origin-jenkins-agent-rust
spec:
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: origin-jenkins-agent-rust:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    dockerfile: >-
      FROM ubuntu:latest
      registry.access.redhat.com/openshift3/jenkins-agent-maven-35-rhel7:latest

      USER root

      RUN yum repolist > /dev/null && yum-config-manager --enable
      rhel-7-server-extras-rpms &&  yum clean all &&  INSTALL_PKGS="skopeo" &&
      yum install -y --setopt=tsflags=nodocs $INSTALL_PKGS && rpm -V
      $INSTALL_PKGS && yum clean all

      RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -y

      USER 1001
    type: Dockerfile
  strategy:
    dockerStrategy: {}
    type: Docker
  triggers: []
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app: api-server-docker
    app.kubernetes.io/instance: development-buildconfigs
  name: api-server-docker
  namespace: website
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: api-server:latest
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    binary: {}
    type: Binary
  strategy:
    dockerStrategy:
      dockerfilePath: Dockerfile
    type: Docker
  successfulBuildsHistoryLimit: 5
  triggers: []
---  
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  name: api-server-pipeline
  namespace: website
spec:
  failedBuildsHistoryLimit: 5
  nodeSelector: {}
  output: {}
  postCommit: {}
  resources: {}
  runPolicy: Serial
  source:
    type: None
  strategy:
    jenkinsPipelineStrategy:
      jenkinsfile: |-
        library identifier: "pipeline-library@master",
        retriever: modernSCM(
            [
                $class: "GitSCMSource",
                remote: "https://github.com/redhat-cop/pipeline-library.git"
            ]   
        )

        def templatePath = 'manifests/api-service.yaml'
        def templateName = 'api-service-pipeline'
        pipeline {
            agent {
              node {
                label 'rust'
              }
            }
            options {
                // set a timeout of 20 seconds for this pipeline
                timeout(time: 20, unit: 'SECONDS')
            }

            stages {
                stage('preamble') {
                    steps {
                        script {
                           echo "PREAMBLE"
                        }
                    }
                }
                
                stage('clean') {
                  steps {
                    script {
                      openshift.withCluster() {
                                openshift.withProject() {
                                  openshift.selector("dc", "api-server").rollout().latest()
                    }
                  }
                }
              }
            }

               //stage('cleanup') {
                //    steps {
                //        script {
                //            openshift.withCluster() {
                 //               openshift.withProject() {
                  //                  // delete everything with this template label
                   //                 openshift.selector("all", [ template : templateName ]).delete()
                                    // delete any secrets with this template label
                  //                  if (openshift.selector("secrets", templateName).exists()) {
                   //                     openshift.selector("secrets", templateName).delete()
                    //                }
                    //            }
                    //        }
                   //     } // script
                  //  } // steps
               // } // stage
                // stage('create') {
                //     steps {
                //         script {
                //             openshift.withCluster() {
                //                 openshift.withProject() {
                //                     // create a new application from the templatePath
                //                     openshift.newApp(templatePath)
                //                 }
                //             }
                //         } // script
                //     } // steps
                // } // stage
                // stage('build') {
                //     steps {
                //         script {
                //             openshift.withCluster() {
                //                 openshift.withProject() {
                //                     def builds = openshift.selector("bc", templateName).related('builds')
                //                     builds.untilEach(1) {
                //                         return (it.object().status.phase == "Complete")
                //                     }
                //                 }
                //             }
                //         } // script
                //     } // steps
                // } // stage
                // stage('deploy') {
                //     steps {
                //         script {
                //             openshift.withCluster() {
                //                 openshift.withProject() {
                //                     def rm = openshift.selector("dc", templateName).rollout()
                //                     openshift.selector("dc", templateName).related('pods').untilEach(1) {
                //                         return (it.object().status.phase == "Running")
                //                     }
                //                 }
                //             }
                //         } // script
                //     } // steps
                // } // stage
                // stage('tag') {
                //     steps {
                //         script {
                //             openshift.withCluster() {
                //                 openshift.withProject() {
                //                     // if everything else succeeded, tag the ${templateName}:latest image as ${templateName}-staging:latest
                //                     // a pipeline build config for the staging environment can watch for the ${templateName}-staging:latest
                //                     // image to change and then deploy it to the staging environment
                //                     openshift.tag("${templateName}:latest", "${templateName}-staging:latest")
                //                 }
                //             }
                //         } // script
                //     } // steps
                // } // stage
            } // stages
        } // pipeline
    type: JenkinsPipeline
  successfulBuildsHistoryLimit: 5
  triggers:
    - github:
        secret: QdBuCPedHi-u2kD4WLRR
      type: GitHub
